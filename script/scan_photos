#!/usr/bin/env ruby

abort "usage: #{__FILE__} /path/to/photos" unless ARGV[0]

require 'bundler'
Bundler.setup

lib = File.expand_path('../../lib', __FILE__)
$:.unshift(lib) if !$:.include?(lib)

require 'data_mapper'
require 'dimensions'
require 'mini_exiftool'
require 'thyme/db'
require 'thyme/photo'
require 'thyme/set'

DataMapper.auto_upgrade!

module Thyme
  class Set
    def self.find_or_create_by_photo_path(path)
      conditions = { name: path.split(File::SEPARATOR)[-2] }

      if set = first(conditions)
        set
      else
        create(conditions)
      end
    end

    def update_taken_at
      newest_photo = photos.first(
        fields: [:taken_at], :taken_at.not => nil, order: :taken_at.desc
      )
      update(taken_at: newest_photo.taken_at) if newest_photo
    end

    def update_photo_siblings
      prev_photo = nil

      photos.oldest_first.all(fields: [:id]).each do |photo|
        if prev_photo
          prev_photo.next_photo = photo
          prev_photo.save

          photo.prev_photo = prev_photo
          photo.save
        end

        prev_photo = photo
      end
    end
  end

  class Photo
    def self.create_from_file(path)
      return if first(path: path)

      exif = MiniExiftool.new(path)
      width, height = Dimensions.dimensions(path)

      exif_hash = exif.to_hash.select do |_, value|
        !value.is_a?(String) ||
          (value.force_encoding('utf-8') && value.valid_encoding?)
      end

      create(
        path:     path,
        size:     File.size(path),
        width:    width,
        height:   height,
        taken_at: exif['DateTimeOriginal'],
        exif:     exif_hash,
        set:      Set.find_or_create_by_photo_path(path)
      )
    end
  end
end

Thyme::Photo.all(fields: [:id, :path]).each do |photo|
  if !File.exist?(photo.path) && photo.destroy
    puts "- #{photo.path}"
  end
end

Dir[
  File.join(
    File.expand_path(ARGV[0]),
    '**',
    '*.{jpg,jpeg,JPG,JPEG}'
  )
].sort.each do |filename|
  photo = Thyme::Photo.create_from_file(filename)

  if photo && photo.saved?
    puts "+ #{filename}"
  end
end

Thyme::Set.each do |set|
  set.update_taken_at
  set.update_photo_siblings
end
