#!/usr/bin/env ruby

abort "usage: #{__FILE__} /path/to/photos" unless ARGV[0]

require 'bundler'
Bundler.setup

lib = File.expand_path('../../lib', __FILE__)
$:.unshift(lib) if !$:.include?(lib)

require 'data_mapper'
require 'dimensions'
require 'mini_exiftool'
require 'thyme/db'
require 'thyme/photo'
require 'thyme/set'

DataMapper.auto_upgrade!

module Thyme
  class Set
    def self.find_or_create_by_photo_path(path)
      conditions = { name: path.split(File::SEPARATOR)[-2] }

      if set = first(conditions)
        set
      else
        create(conditions)
      end
    end

    def update_taken_at!
      self.taken_at = taken_at
      save
    end

    private

    def taken_at
      photos.all(fields: [:taken_at]).map(&:taken_at).compact.max
    end
  end

  class Photo
    def self.create_from_file(path)
      exif = MiniExiftool.new(path)
      width, height = Dimensions.dimensions(path)

      exif_hash = exif.to_hash.reject! do |_, value|
        next unless value.is_a?(String)

        value.force_encoding('utf-8') && !value.valid_encoding?
      end

      create(
        path:     path,
        size:     File.size(path),
        width:    width,
        height:   height,
        taken_at: exif['DateTimeOriginal'],
        exif:     exif_hash,
        set:      Set.find_or_create_by_photo_path(path)
      )
    end
  end
end

Dir[
  File.join(
    File.expand_path(ARGV[0]),
    '**',
    '*.{jpg,jpeg,JPG,JPEG}'
  )
].sort.each do |filename|
  Thyme::Photo.create_from_file(filename)
  puts filename
end

Thyme::Set.each(&:update_taken_at!)
