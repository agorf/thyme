#!/usr/bin/env ruby

abort "usage: #{__FILE__} path [path...]" if ARGV.empty?

require 'bundler'
Bundler.setup

lib = File.expand_path('../../lib', __FILE__)
$:.unshift(lib) if !$:.include?(lib)

require 'dimensions'
require 'mini_exiftool'
require 'thyme/db'
require 'thyme/photo'
require 'thyme/set'

module Thyme
  class Set
    def self.find_or_create_by_photo_path(path)
      Set.find_or_create(name: path.split(File::SEPARATOR)[-2])
    end

    def update_taken_at
      newest_photo = photos_dataset.exclude(taken_at: nil).
                                    reverse_order(:taken_at).
                                    select(:taken_at).
                                    first
      update(taken_at: newest_photo.taken_at) if newest_photo
    end

    def update_photo_siblings
      prev_photo = nil

      photos_dataset.oldest_first.select(:id).each do |photo|
        if prev_photo
          prev_photo.update(next_photo_id: photo.id)
          photo.update(prev_photo_id: prev_photo.id)
        end

        prev_photo = photo
      end
    end

    def update_photos_count
      update(photos_count: photos_dataset.count)
    end

    def update_thumb_url
      update(thumb_url: photos_dataset.oldest_first.first.small_thumb_url)
    end
  end

  class Photo
    def self.create_by_path(path)
      width, height = Dimensions.dimensions(path)

      exif = MiniExiftool.new(path, coord_format: '%+.6f degrees')

      exif_hash = exif.to_hash.select do |_, value|
        !value.is_a?(String) ||
          (value.force_encoding('utf-8') && value.valid_encoding?)
      end

      create(
        set_id:   Set.find_or_create_by_photo_path(path).id,
        path:     path,
        size:     File.size(path),
        width:    width,
        height:   height,
        taken_at: exif['DateTimeOriginal'],
        exif:     exif_hash,
        uuid:     SecureRandom.uuid
      )
    end
  end
end

Thyme::Photo.select(:id, :path).each do |photo|
  if !File.exist?(photo.path) && photo.destroy
    puts "- #{photo.path}"
  end
end

ARGV.each do |argv|
  Dir[
    File.join(
      File.expand_path(argv),
      '**',
      '*.{jpg,jpeg,JPG,JPEG}'
    )
  ].sort.each do |photo_path|
    if Thyme::Photo.where(path: photo_path).empty?
      Thyme::Photo.create_by_path(photo_path)
      puts "+ #{photo_path}"
    end
  end
end

Thyme::Set.each do |set|
  set.update_taken_at
  set.update_thumb_url
  set.update_photo_siblings
  set.update_photos_count
end
